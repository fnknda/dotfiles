priority 0

##
## General
snippet main "structure of a main file"
int main(${1:int argc, char* argv[]})
{
	${0}
}
endsnippet
snippet sleep "std::thread"
using namespace std::chrono_literals;
std::this_thread::sleep_for(${0:100}${1:ms});
endsnippet
snippet thread "std::thread"
std::thread ${0};
endsnippet

##
## Preprocessor
snippet inc "#include <...>"
#include <${1:iostream}>
endsnippet
snippet once "#pragma once"
#pragma once
endsnippet
snippet ios "#include <iostream>"
#include <iostream>

endsnippet
snippet str "#include <string>"
#include <string>

endsnippet
snippet mem "#include <memory>"
#include <memory>

endsnippet
snippet alg "#include <algorithm>"
#include <algorithm>

endsnippet
snippet iom "#include <iomanip>"
#include <iomanip>

endsnippet
snippet thr "#include <thread>"
#include <thread>

endsnippet
snippet thr "#include <thread>"
#include <thread>

endsnippet
snippet chr "#include <chrono>"
#include <chrono>

endsnippet

##
## STL Collections
snippet array "std::array"
std::array<${1:T}, ${2:N}> ${0};
endsnippet
snippet vector "std::vector"
std::vector<${1:T}> ${0};
endsnippet
snippet deque "std::deque"
std::deque<${1:T}> ${0};
endsnippet
snippet flist "std::forward_list"
std::forward_list<${1:T}> ${0};
endsnippet
snippet list "std::list"
std::list<${1:T}> ${0};
endsnippet
snippet set "std::set"
std::set<${1:T}> ${0};
endsnippet
snippet map "std::map"
std::map<${1:Key}, ${2:T}> ${0};
endsnippet
snippet mset "std::multiset"
std::multiset<${1:T}> ${0};
endsnippet
snippet mmap "std::multimap"
std::multimap<${1:Key}, ${2:T}> ${0};
endsnippet
snippet uset "std::unordered_set"
std::unordered_set<${1:T}> ${0};
endsnippet
snippet umap "std::unordered_map"
std::unordered_map<${1:Key}, ${2:T}> ${0};
endsnippet
snippet umset "std::unordered_multiset"
std::unordered_multiset<${1:T}> ${0};
endsnippet
snippet ummap "std::unordered_multimap"
std::unordered_multimap<${1:Key}, ${2:T}> ${0};
endsnippet
snippet stack "std::stack"
std::stack<${1:T}> ${0};
endsnippet
snippet queue "std::queue"
std::queue<${1:T}> ${0};
endsnippet
snippet pqueue "std::priority_queue"
std::priority_queue<${1:T}> ${0};
endsnippet

##
## STL smart pointers
snippet msp "std::shared_ptr"
std::shared_ptr<${1:T}> ${2:var} = std::make_shared<${1}>(${0});
endsnippet
snippet amsp "auto std::shared_ptr"
auto ${1:var} = std::make_shared<${2:T}>(${0});
endsnippet
snippet mup "std::unique_ptr"
std::unique_ptr<${1:T}> ${2:var} = std::make_unique<${1}>(${0});
endsnippet
snippet amup "auto std::unique_ptr"
auto ${1:var} = std::make_unique<${2:T}>(${0});
endsnippet

##
## Access Modifiers
snippet pri "private"
private ${0}
endsnippet
snippet pro "protected"
protected ${0}
endsnippet
snippet pub "public"
public ${0}
endsnippet
snippet fr "friend"
friend ${0}
endsnippet
snippet mu "mutable"
mutable ${0}
endsnippet

##
## Class
snippet cl "class"
class ${1:`vim_snippets#Filename('$1', 'name')`}
{
	${0}
};
endsnippet
snippet mfun "member function implementation"
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
{
	${0}
}
endsnippet
snippet ns "namespace"
namespace ${1:`vim_snippets#Filename('', 'name')`}
{
	${0}
}
endsnippet
snippet ans "anonymous namespace"
namespace
{
	${0}
}
endsnippet

##
## Input/Output
snippet cout "std::cout"
std::cout << ${0} << std::endl;
endsnippet
snippet cin "std::cin"
std::cin >> ${0};
endsnippet
snippet cerr "std::cerr"
std::cerr << ${0} << std::endl;
endsnippet

##
## Casts
snippet sca "static"
static_cast<${1:unsigned}>(${0:expr})
endsnippet
snippet dca "dynamic"
dynamic_cast<${1:unsigned}>(${0:expr})
endsnippet
snippet rca "reinterpret"
reinterpret_cast<${1:unsigned}>(${0:expr})
endsnippet
snippet cca "const"
const_cast<${1:unsigned}>(${0:expr})
endsnippet
## Iteration
snippet fori "for i"
for (int ${2:i} = 0; ${2} < ${1:count}; ${2}${3:++}) {
	${0:std::cout << ${2} << std::endl;}
}
endsnippet
snippet fore "foreach"
for (${1:const auto&} ${2:i} : ${3:container}) {
	${0:std::cout << ${2} << std::endl;}
}
endsnippet
snippet iter "iterator"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); ${4} != ${5}.end(); ++${4}) {
	${6}
}
endsnippet

##
## Lambdas
snippet ld "lamda (one line)"
[${1}] (${2}) { ${0} };
endsnippet
snippet lld "lambda (multi-line)"
[${1}] (${2}) {
	${0}
};
endsnippet
snippet try "snippets exception"
try {
	${0}
}
catch(${1:const std::exception&} ${2:e}) {
	std::cerr << "\e[1;91m[ERR]\e[m " << ${2}.what() << std::endl;
}
endsnippet
snippet af "auto function"
auto ${1:name}(${2}) -> ${3:void}
{
	${0}
};
endsnippet
